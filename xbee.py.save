from __future__ import annotations
import time
import typing
import struct
from digi.xbee.devices import DigiMeshDevice
from enum import Enum

'''
NOTE:
May need to look at manually compressing the xbee data, ie, rearrange and add bits together
combine bools with bitshifting

Python docs:
https://xbplib.readthedocs.io/en/latest/getting_started_with_xbee_python_library.html



'''

## Setup for the device

comm_port = "/dev/ttyAMA0"
baud_rate = "9600"


device = DigiMeshDevice(port=comm_port, baud_rate=baud_rate)
device.open()

network = device.get_network()

network.start_discovery_process()

while network.is_discovery_running():
    time.sleep(.01)

devices = {dev.get_node_id():dev._64bit_addr for dev in network.get_devices()}
devices[device.get_node_id()] = device._64bit_addr


# bwb using c++

##
 Data Classes


class Packet:
	def __init__(self, recipiant, data: bytearray):
		if recipiant in devices:
			self.recip_addr = devices[recipiant]
		else:
			self.recip_addr = 0
			print(f'{recipiant} not detected on the network' )
		self.data = data

	def transmit(self):
		device.send_data_64(self.recip_addr, self.data)

	def transmit_async(self):
		device.send_data_async_64(self.recip_addr, self.data)

	def __repr__(self):
		return str(self.__dict__)[1:-1]



# ToGCS used to transmit all data needed to the GCS from a given vehicle
class ToGCS:
	def __init__(self, altitude: float, speed: float, orientation: Orientation, gps: LatLng, sensors_ok: bool, current_stage: int, stage_complete: bool,
				hiker_position: LatLng, status: int, propulsion: bool, geofence_compliant: bool):
		self.altitude = altitude
		self.speed = speed
		self.orientation = orientation
		self.gps = gps
		self.sensors_ok = sensors_ok
		self.current_stage = current_stage
		self.stage_complete = stage_complete
		self.hiker_position = hiker_position
		self.status = status
		self.propulsion = propulsion
		self.geofence_compliant = geofence_compliant
	
	def serialize(self):
		header = struct.pack("7f?B?2fB2?", self.altitude, self.speed, self.orientation.pitch, self.orientation.roll, self.orientation.yaw, self.gps.lat,
							self.gps.lng, self.sensors_ok, self.current_stage, self.stage_complete, self.hiker_position.lat, self.hiker_position.lng,
							self.status, self.propulsion, self.geofence_compliant)
		
		return Packet('gcs', header)

	@classmethod
	def deserialize(cls, data: bytearray):
		raw = [*struct.unpack("7f?B?2fB2?", data)]
		raw.insert(2, Orientation(raw.pop(2), raw.pop(2), raw.pop(2)))
		raw.insert(3, LatLng(raw.pop(3), raw.pop(3)))
		raw.insert(7, LatLng(raw.pop(7), raw.pop(7)))

		return cls(*raw)


	def __repr__(self):
		return str(self.__dict__)[1:-1]

# ToBWB
class ToBWB:
	def __init__(self, stop_coord, perform_stage: int, hiker_position: LatLng, geofence: list[Geofence], search_area: list[SearchArea],
	 			travel_to: LatLng, drop_location: LatLng, armed: bool):
		if stop_coord:
			self.stop_coord = stop_coord
			self.stop = True
		else:
			self.stop = False
		self.perform_stage = perform_stage
		self.hiker_position = hiker_position
		self.geofence_length = len(geofence)
		self.geofence = geofence
		self.search_area_length = len(search_area)
		self.search_area = search_area
		self.travel_to = travel_to
		self.drop_location = drop_location
		self.armed = armed

	def serialize(self):
		header = struct.pack("?B2f2I4f?", self.stop, self.perform_stage, self.hiker_position.lat, self.hiker_position.lng, self.geofence_length, self.search_area_length,
							self.travel_to.lat, self.travel_to.lng, self.drop_location.lat, self.drop_location.lng, self.armed)
		body = bytearray()
		for geofence_obj in self.geofence:
			body += struct.pack("?B",geofence_obj.keep_in, geofence_obj.coord_length)
			for point in geofence_obj.coords:
				body += struct.pack("2f", point.lat, point.lng)

		for search_area_obj in self.search_area:
			body += struct.pack("B", search_area_obj.coord_length)
			for point in search_area_obj.coords:
				body += struct.pack("2f", point.lat, point.lng)
		
		if self.stop:
			body += struct.pack("3f", *self.stop_coord)

		header += body

		return Packet('bwb', header)

	@classmethod
	def deserialize(cls, data: bytearray):
		header = data[:37]
		body = data[37:]
		raw = [*struct.unpack("?B2f2I4f?", header)]
		raw.insert(2, LatLng(raw.pop(2), raw.pop(2)))
		raw.insert(5, LatLng(raw.pop(5), raw.pop(5)))
		raw.insert(6, LatLng(raw.pop(6), raw.pop(6)))
		stop = raw[0]
		geofence_length = raw.pop(3)
		search_area_length = raw.pop(3)

		geofence = []
		for i in range(geofence_length):
			keep, coord_length = struct.unpack("?B", body[:2])
			coords = []
			body = body[2:]
			for j in range(coord_length):
				coords += [LatLng(*struct.unpack("2f", body[:8]))]
				body = body[8:]

			geofence += [Geofence(keep, coords)]
		
		search_area = []
		for i in range(search_area_length):
			(coord_length, ) = struct.unpack("B", body[:1])
			coords = []
			body = body[1:]
			for j in range(coord_length):
				coords += [LatLng(*struct.unpack("2f", body[:8]))]
				body = body[8:]

			search_area += [SearchArea(coords)]

		if stop:
			raw[0] = struct.unpack("3f", body)
		else:
			raw[0] = None

		raw.insert(3, search_area)
		raw.insert(3, geofence)

		return cls(*raw)

	def __repr__(self):
		return str(self.__dict__)[1:-1]

# ToUGV

## Helper methods


## Defines custom data structures needed
class LatLng():
	lat: float
	lng: float

	def __init__(self, lat: float=0, lng: float=0):
		self.lat = lat
		self.lng = lng

	def __add__(self, o):
		return LatLng(self.lat + o.lat, self.lng + o.lng)

	def __sub__(self, o):
		return LatLng(self.lat - o.lat, self.lng - o.lng)

	def __EQ__(self, o):
		return self.lat == o.lat and self.lng == o.lng

	def __NE__(self, o):
		return self.lat != o.lat or self.lng != o.lng

	def __repr__(self):
		return f"{{Latitude: {self.lat}, Longitude: {self.lng}}}"

class Geofence():

	def __init__(self, keep_in: bool, coords: list[LatLng]):
		self.keep_in = keep_in
		self.coords = coords
		self.coord_length = len(coords)

	def __iadd__(self, o):
		self.coords += o.coords
		return self

	# TODO: Implement method to calculate if a point is inside the given coords
	def inside(self, point: LatLng):
		return False 

	def __repr__(self):
		return '{' + str(self.__dict__)[1:-1] + '}'

class SearchArea():

	def __init__(self, coords: list[LatLng]):
		self.coords = coords
		self.coord_length = len(coords)
	
	# TODO: Implement method to calculate if a point is inside the given coords
	def inside(self, point: LatLng):
		return False 

	def __repr__(self):
		return '{' + str(self.__dict__)[1:-1] + '}'

class Orientation():
	pitch: float
	roll: float
	yaw: float

	def __init__(self, pitch: float, roll: float, yaw: float):
		self.pitch = pitch
		self.roll = roll
		self.yaw = yaw

	def __repr__(self):
		return f"{{Pitch: {self.pitch}*, Roll: {self.roll}*, Yaw: {self.yaw}*}}"

class ManualControl():
	vertical: float
	horizontal: float
	arm: float
	claw: float
	

## CODE FOR TESTING
o = Orientation(1,1,1)
g = LatLng(2,2.0005)
h = LatLng(1.5, 1.5)

togcs = ToGCS(1.5,10,o,g,True,3,False,h,1,True,True)

geo_bounds = [Geofence(True, [LatLng(1,0),LatLng(0,1),LatLng(-1,0),LatLng(0,-1)])]
geo_bounds.append(Geofence(False, [LatLng(1,1),LatLng(2,1),LatLng(2,-1),LatLng(1,-1)]))

area = SearchArea([LatLng(1,0),LatLng(0,1),LatLng(-1,0),LatLng(0,-1)])

tobwb = ToBWB(None, 1, LatLng(1,1), geo_bounds, [area], LatLng(.5,.5), LatLng(.6,0), False)
tobwb2 = ToBWB((2.2,3.3,500), 1, LatLng(1,1), geo_bounds, [area,area], LatLng(.5,.5), LatLng(.6,0), False)
